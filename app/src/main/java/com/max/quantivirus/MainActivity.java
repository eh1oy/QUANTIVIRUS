package com.max.quantivirus;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.widget.CompoundButton;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import android.content.SharedPreferences;
import android.content.Context;
import android.app.ActivityManager;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.os.Handler;
import android.os.Looper;
import android.provider.Settings;
import android.app.AlertDialog;
import android.content.DialogInterface;
import java.util.List;

import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

public class MainActivity extends AppCompatActivity {
    private SwitchMaterial antivirusSwitch;
    private MaterialButton githubButton, siteButton, telegramButton;
    private FloatingActionButton fabScan;
    private SharedPreferences prefs;
    private static final String PREFS_NAME = "quantivirus_prefs";
    private static final String KEY_ANTIVIRUS_ENABLED = "antivirus_enabled";
    private Handler serviceMonitor;
    private static final long MONITOR_INTERVAL = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
    private boolean isDestroyed = false;
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private static final int OVERLAY_PERMISSION_REQUEST_CODE = 1234;
    private static final int BATTERY_OPTIMIZATION_REQUEST_CODE = 5678;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
                @Override
                public void uncaughtException(Thread thread, Throwable ex) {
                    android.util.Log.e("MainActivity", "Uncaught exception: " + ex.getMessage());
                    ex.printStackTrace();
                    
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
                    try {
                        if (!isDestroyed) {
                            Intent restartIntent = new Intent(MainActivity.this, MainActivity.class);
                            restartIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
                            startActivity(restartIntent);
                        }
                    } catch (Exception e) {
                        android.util.Log.e("MainActivity", "Error restarting activity: " + e.getMessage());
                    }
                }
            });
            
            setContentView(R.layout.activity_main);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SharedPreferences
            prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);
            boolean enabled = prefs.getBoolean(KEY_ANTIVIRUS_ENABLED, true);

            // –ù–∞—Ö–æ–¥–∏–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
            antivirusSwitch = findViewById(R.id.antivirus_switch);
            githubButton = findViewById(R.id.github_button);
            siteButton = findViewById(R.id.site_button);
            telegramButton = findViewById(R.id.telegram_button);
            fabScan = findViewById(R.id.fab_scan);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
            if (antivirusSwitch == null) {
                Toast.makeText(this, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UI", Toast.LENGTH_SHORT).show();
                return;
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å - –í–°–ï–ì–î–ê –í–ö–õ–Æ–ß–ï–ù
            antivirusSwitch.setChecked(true);
            antivirusSwitch.setEnabled(false); // –î–µ–ª–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            checkAndRequestPermissions();
            
            // –ê–Ω—Ç–∏–≤–∏—Ä—É—Å –í–°–ï–ì–î–ê –∑–∞–ø—É—â–µ–Ω
            startAntivirus();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏
            startAutonomyService();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏
            startServiceMonitoring();

            antivirusSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    try {
                        // –§–µ–π–∫–æ–≤—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –í–ö–õ
                        antivirusSwitch.setChecked(true);
                        prefs.edit().putBoolean(KEY_ANTIVIRUS_ENABLED, true).apply();
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω
                        Toast.makeText(MainActivity.this, "üõ°Ô∏è QUANTIVIRUS –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –∏ –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!", Toast.LENGTH_LONG).show();
                        if (isChecked) {
                            startAntivirus();
                            Toast.makeText(MainActivity.this, "–ê–Ω—Ç–∏–≤–∏—Ä—É—Å –≤–∫–ª—é—á–µ–Ω", Toast.LENGTH_SHORT).show();
                        } else {
                            stopAntivirus();
                            Toast.makeText(MainActivity.this, "–ê–Ω—Ç–∏–≤–∏—Ä—É—Å –≤—ã–∫–ª—é—á–µ–Ω", Toast.LENGTH_SHORT).show();
                        }
                    } catch (Exception e) {
                        android.util.Log.e("MainActivity", "Error in switch listener: " + e.getMessage());
                    }
                }
            });

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            if (githubButton != null) {
                githubButton.setOnClickListener(v -> {
                    try {
                        openUrl("https://github.com/eh1oy");
                    } catch (Exception e) {
                        android.util.Log.e("MainActivity", "Error opening GitHub: " + e.getMessage());
                    }
                });
            }

            if (siteButton != null) {
                siteButton.setOnClickListener(v -> {
                    try {
                        openUrl("https://quantivirus.rf.gd");
                    } catch (Exception e) {
                        android.util.Log.e("MainActivity", "Error opening site: " + e.getMessage());
                    }
                });
            }

            if (telegramButton != null) {
                telegramButton.setOnClickListener(v -> {
                    try {
                        openUrl("https://t.me/quantivirus");
                    } catch (Exception e) {
                        android.util.Log.e("MainActivity", "Error opening Telegram: " + e.getMessage());
                    }
                });
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FAB
            if (fabScan != null) {
                fabScan.setOnClickListener(v -> {
                    try {
                        startAntivirus();
                        Toast.makeText(this, "–ó–∞–ø—É—â–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", Toast.LENGTH_SHORT).show();
                    } catch (Exception e) {
                        android.util.Log.e("MainActivity", "Error starting scan: " + e.getMessage());
                    }
                });
            }

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            requestPermissions();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            checkPermissionStatus();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞
            startServiceMonitoring();

        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error in onCreate: " + e.getMessage());
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", Toast.LENGTH_LONG).show();
        }
    }
    
    private void startServiceMonitoring() {
        serviceMonitor = new Handler(Looper.getMainLooper());
        serviceMonitor.postDelayed(new Runnable() {
            @Override
            public void run() {
                try {
                    if (isDestroyed) {
                        return; // –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–∏—Å
                    if (!isServiceRunning()) {
                        android.util.Log.w("MainActivity", "Service not running, restarting...");
                        startAntivirus();
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å
                    boolean enabled = prefs.getBoolean(KEY_ANTIVIRUS_ENABLED, true);
                    if (enabled && !isServiceRunning()) {
                        android.util.Log.d("MainActivity", "Antivirus enabled but service not running, restarting");
                        startAntivirus();
                    }
                    
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞
                    if (!isDestroyed) {
                        serviceMonitor.postDelayed(this, MONITOR_INTERVAL);
                    }
                } catch (Exception e) {
                    android.util.Log.e("MainActivity", "Error in service monitoring: " + e.getMessage());
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞
                    if (!isDestroyed) {
                        serviceMonitor.postDelayed(this, MONITOR_INTERVAL);
                    }
                }
            }
        }, MONITOR_INTERVAL);
    }
    
    private boolean isServiceRunning() {
        try {
            ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
            if (am != null) {
                java.util.List<ActivityManager.RunningServiceInfo> services = am.getRunningServices(Integer.MAX_VALUE);
                if (services != null) {
                    for (ActivityManager.RunningServiceInfo service : services) {
                        if (service.service.getClassName().equals(AntivirusService.class.getName())) {
                            return true;
                        }
                    }
                }
            }
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error checking if service is running: " + e.getMessage());
        }
        return false;
    }

    private void startAntivirus() {
        try {
            Intent serviceIntent = new Intent(this, AntivirusService.class);
            
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                startForegroundService(serviceIntent);
            } else {
                startService(serviceIntent);
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 500ms
            new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
                @Override
                public void run() {
                    try {
                        if (!isServiceRunning() && !isDestroyed) {
                            android.util.Log.w("MainActivity", "Service not started, retrying...");
                            Intent retryIntent = new Intent(MainActivity.this, AntivirusService.class);
                            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                                startForegroundService(retryIntent);
                            } else {
                                startService(retryIntent);
                            }
                        }
                    } catch (Exception e) {
                        android.util.Log.e("MainActivity", "Error in retry: " + e.getMessage());
                    }
                }
            }, 500); // 500ms
            
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error starting antivirus service: " + e.getMessage());
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞", Toast.LENGTH_SHORT).show();
        }
    }
    
    private void startAutonomyService() {
        try {
            android.util.Log.d("MainActivity", "Starting autonomy service");
            
            Intent serviceIntent = new Intent(this, AutonomyService.class);
            
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
                startForegroundService(serviceIntent);
            } else {
                startService(serviceIntent);
            }
            
            android.util.Log.d("MainActivity", "Autonomy service started");
            
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error starting autonomy service: " + e.getMessage());
        }
    }
    


    private void stopAntivirus() {
        try {
            Intent serviceIntent = new Intent(this, AntivirusService.class);
            stopService(serviceIntent);
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error stopping antivirus service: " + e.getMessage());
        }
    }

    private void openUrl(String url) {
        try {
            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
            if (intent.resolveActivity(getPackageManager()) != null) {
                startActivity(intent);
            } else {
                Toast.makeText(this, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", Toast.LENGTH_SHORT).show();
            }
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error opening URL: " + e.getMessage());
            Toast.makeText(this, "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏", Toast.LENGTH_SHORT).show();
        }
    }
    
    private void requestPermissions() {
        try {
            android.util.Log.d("MainActivity", "requestPermissions: starting permission requests");
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                if (!android.provider.Settings.canDrawOverlays(this)) {
                    android.util.Log.d("MainActivity", "requestPermissions: requesting overlay permission");
                    Toast.makeText(this, "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", Toast.LENGTH_LONG).show();
                    
                    Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                            Uri.parse("package:" + getPackageName()));
                    startActivityForResult(intent, 1234);
                } else {
                    android.util.Log.d("MainActivity", "requestPermissions: overlay permission already granted");
                }
            }
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                String packageName = getPackageName();
                android.os.PowerManager pm = (android.os.PowerManager) getSystemService(Context.POWER_SERVICE);
                if (pm != null && !pm.isIgnoringBatteryOptimizations(packageName)) {
                    android.util.Log.d("MainActivity", "requestPermissions: requesting battery optimization ignore");
                    Toast.makeText(this, "–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏", Toast.LENGTH_LONG).show();
                    
                    Intent intent = new Intent();
                    intent.setAction(android.provider.Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
                    intent.setData(Uri.parse("package:" + packageName));
                    startActivity(intent);
                } else {
                    android.util.Log.d("MainActivity", "requestPermissions: battery optimization already ignored");
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            checkAndRequestAdditionalPermissions();
            
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error requesting permissions: " + e.getMessage());
        }
    }
    
    private void checkAndRequestAdditionalPermissions() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤ (–¥–ª—è Android 11+)
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.R) {
                if (!getPackageManager().canRequestPackageInstalls()) {
                    android.util.Log.d("MainActivity", "requestPermissions: requesting package install permission");
                    Intent intent = new Intent(android.provider.Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES);
                    startActivity(intent);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π)
            checkAutoStartPermission();
            
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error checking additional permissions: " + e.getMessage());
        }
    }
    
    private void checkAutoStartPermission() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
            String[] autoStartPackages = {
                "com.miui.securitycenter",
                "com.letv.android.letvsafe",
                "com.huawei.systemmanager",
                "com.coloros.safecenter",
                "com.oppo.safe",
                "com.oneplus.security",
                "com.vivo.permissionmanager"
            };
            
            for (String packageName : autoStartPackages) {
                try {
                    getPackageManager().getPackageInfo(packageName, 0);
                    android.util.Log.d("MainActivity", "Found auto-start manager: " + packageName);
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
                } catch (PackageManager.NameNotFoundException e) {
                    // –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                }
            }
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error checking auto-start permission: " + e.getMessage());
        }
    }
    
    private void checkPermissionStatus() {
        try {
            android.util.Log.d("MainActivity", "checkPermissionStatus: checking all permissions");
            
            boolean overlayGranted = false;
            boolean batteryOptimizationIgnored = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                overlayGranted = android.provider.Settings.canDrawOverlays(this);
                android.util.Log.d("MainActivity", "checkPermissionStatus: overlay permission = " + overlayGranted);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                String packageName = getPackageName();
                android.os.PowerManager pm = (android.os.PowerManager) getSystemService(Context.POWER_SERVICE);
                if (pm != null) {
                    batteryOptimizationIgnored = pm.isIgnoringBatteryOptimizations(packageName);
                    android.util.Log.d("MainActivity", "checkPermissionStatus: battery optimization ignored = " + batteryOptimizationIgnored);
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (!overlayGranted) {
                Toast.makeText(this, "‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–≤–µ—Ä–ª–µ–π –ù–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ! –û–≤–µ—Ä–ª–µ–π –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.", Toast.LENGTH_LONG).show();
            } else {
                Toast.makeText(this, "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–≤–µ—Ä–ª–µ–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", Toast.LENGTH_SHORT).show();
            }
            
            if (!batteryOptimizationIgnored) {
                Toast.makeText(this, "‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π", Toast.LENGTH_LONG).show();
            } else {
                Toast.makeText(this, "‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞", Toast.LENGTH_SHORT).show();
            }
            
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error checking permission status: " + e.getMessage());
        }
    }
    
    @Override
    protected void onResume() {
        super.onResume();
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            boolean enabled = prefs.getBoolean(KEY_ANTIVIRUS_ENABLED, true);
            if (enabled && !isServiceRunning()) {
                android.util.Log.d("MainActivity", "Service not running on resume, restarting");
                startAntivirus();
            }
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error in onResume: " + e.getMessage());
        }
    }
    
    @Override
    protected void onPause() {
        super.onPause();
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –ø–∞—É–∑–µ
    }
    
    @Override
    protected void onStop() {
        super.onStop();
        // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    }
    
    @Override
    protected void onDestroy() {
        super.onDestroy();
        
        isDestroyed = true;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (serviceMonitor != null) {
            serviceMonitor.removeCallbacksAndMessages(null);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    private void checkAndRequestPermissions() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                if (!Settings.canDrawOverlays(this)) {
                    requestOverlayPermission();
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                String packageName = getPackageName();
                android.os.PowerManager pm = (android.os.PowerManager) getSystemService(Context.POWER_SERVICE);
                if (pm != null && !pm.isIgnoringBatteryOptimizations(packageName)) {
                    requestBatteryOptimizationPermission();
                }
            }
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error checking permissions: " + e.getMessage());
        }
    }
    
    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–≤–µ—Ä–ª–µ—è
     */
    private void requestOverlayPermission() {
        try {
            new AlertDialog.Builder(this)
                .setTitle("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞")
                .setMessage("–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –≤–∏—Ä—É—Å–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.")
                .setPositiveButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        try {
                            Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);
                            intent.setData(Uri.parse("package:" + getPackageName()));
                            startActivityForResult(intent, OVERLAY_PERMISSION_REQUEST_CODE);
                        } catch (Exception e) {
                            android.util.Log.e("MainActivity", "Error opening overlay settings: " + e.getMessage());
                        }
                    }
                })
                .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
                .setCancelable(false)
                .show();
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error showing overlay permission dialog: " + e.getMessage());
        }
    }
    
    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞—Ç–∞—Ä–µ–∏
     */
    private void requestBatteryOptimizationPermission() {
        try {
            new AlertDialog.Builder(this)
                .setTitle("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏")
                .setMessage("–î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞—Ç–∞—Ä–µ–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
                .setPositiveButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        try {
                            Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
                            intent.setData(Uri.parse("package:" + getPackageName()));
                            startActivityForResult(intent, BATTERY_OPTIMIZATION_REQUEST_CODE);
                        } catch (Exception e) {
                            android.util.Log.e("MainActivity", "Error opening battery settings: " + e.getMessage());
                        }
                    }
                })
                .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
                .setCancelable(false)
                .show();
        } catch (Exception e) {
            android.util.Log.e("MainActivity", "Error showing battery optimization dialog: " + e.getMessage());
        }
    }
    
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        
        if (requestCode == OVERLAY_PERMISSION_REQUEST_CODE) {
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                if (Settings.canDrawOverlays(this)) {
                    android.util.Log.d("MainActivity", "Overlay permission granted");
                    Toast.makeText(this, "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!", Toast.LENGTH_SHORT).show();
                    
                    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                    new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            startAntivirus();
                        }
                    }, 1000);
                    
                } else {
                    android.util.Log.e("MainActivity", "Overlay permission denied");
                    Toast.makeText(this, "‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ –ù–ï –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ! –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–∏—Ä—É—Å–∞—Ö –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.", Toast.LENGTH_LONG).show();
                }
            }
        } else if (requestCode == BATTERY_OPTIMIZATION_REQUEST_CODE) {
            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
                String packageName = getPackageName();
                android.os.PowerManager pm = (android.os.PowerManager) getSystemService(Context.POWER_SERVICE);
                if (pm != null && pm.isIgnoringBatteryOptimizations(packageName)) {
                    android.util.Log.d("MainActivity", "Battery optimization permission granted");
                    Toast.makeText(this, "‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞!", Toast.LENGTH_SHORT).show();
                } else {
                    android.util.Log.e("MainActivity", "Battery optimization permission denied");
                    Toast.makeText(this, "‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞—Ç–∞—Ä–µ–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π.", Toast.LENGTH_LONG).show();
                }
            }
        }
    }
} 